# Generated by Django 5.0.6 on 2024-06-09 17:36

import customer.models.customer
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AverageCheck',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60, verbose_name='Средний чек бренда')),
                ('sort', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Сортировка')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активность')),
                ('datetime_create', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Средний чек бренда',
                'verbose_name_plural': 'Средние чеки бренда',
            },
        ),
        migrations.CreateModel(
            name='FAQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField(null=True, verbose_name='Вопрос')),
                ('answer', models.TextField(null=True, verbose_name='Ответ')),
            ],
            options={
                'verbose_name': 'Часто задаваемые вопросы',
                'verbose_name_plural': 'Часто задаваемые вопросы',
            },
        ),
        migrations.CreateModel(
            name='Interest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60, verbose_name='Интерес/тег')),
                ('sort', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Сортировка')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активность')),
                ('datetime_create', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Интерес/тег',
                'verbose_name_plural': 'Интересы/теги',
            },
        ),
        migrations.CreateModel(
            name='NameSocialNetwork',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60, verbose_name='Название соц сети/месседжера/сайта')),
                ('sort', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Сортировка')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активность')),
                ('datetime_create', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Название соц сети',
                'verbose_name_plural': 'Название соц сетей',
            },
        ),
        migrations.CreateModel(
            name='NumberSubscribers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60, verbose_name='Кол-во подписчиков')),
                ('sort', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Сортировка')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активность')),
                ('datetime_create', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Кол-во подписчиков',
                'verbose_name_plural': 'Кол-во подписчиков',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, verbose_name='Название роли')),
                ('sort', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Сортировка')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активность')),
                ('datetime_create', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Роль пользователя',
                'verbose_name_plural': 'Роли пользователей',
            },
        ),
        migrations.CreateModel(
            name='Tariff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, null=True, verbose_name='Название тарифа')),
                ('price', models.IntegerField(null=True, verbose_name='Стоимость тарифа')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание тарифа')),
                ('duration', models.IntegerField(default=12, null=True, verbose_name='Длительность тарифа')),
                ('datetime_create', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Тариф',
                'verbose_name_plural': 'Тарифы',
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('patronymic', models.CharField(blank=True, max_length=30, null=True, verbose_name='Отчество пользователя')),
                ('phone', models.CharField(blank=True, max_length=12, null=True, verbose_name='Контактный телефон')),
                ('balance', models.IntegerField(default=1, null=True, verbose_name='Баланс')),
                ('experience', models.IntegerField(default=1, null=True, verbose_name='Опыт')),
                ('level', models.IntegerField(default=1, null=True, verbose_name='Уровень')),
                ('modifier', models.IntegerField(default=1, null=True, verbose_name='Модификатор')),
                ('gender', models.CharField(blank=True, choices=[('man', 'Мужчина'), ('woman', 'Женщина')], max_length=10, verbose_name='Пол')),
                ('avatar_id', models.ImageField(blank=True, null=True, upload_to=customer.models.customer.get_image_path_customer, verbose_name='Аватар')),
                ('datetime_create', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'ordering': ('last_name', 'first_name', 'balance'),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='FotoCustomer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('foto', models.ImageField(blank=True, null=True, upload_to=customer.models.customer.get_image_path_customer, verbose_name='Фотография')),
                ('description', models.CharField(blank=True, max_length=255, null=True, verbose_name='Описание фотографии')),
                ('customer_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='customer_foto', to=settings.AUTH_USER_MODEL, verbose_name='ID пользователя')),
            ],
            options={
                'verbose_name': 'Фотография пользователя',
                'verbose_name_plural': 'Фотографии пользователя',
            },
        ),
        migrations.CreateModel(
            name='CustomerInterest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='customers_interests', to=settings.AUTH_USER_MODEL, verbose_name='ID пользователя')),
                ('interest_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='interests', to='customer.interest', verbose_name='ID интереса')),
            ],
            options={
                'verbose_name': 'Сводная таблица пользователь и интерес',
                'verbose_name_plural': 'Сводные таблицы пользователи и интересы',
                'ordering': ('-customer_id', 'interest_id'),
            },
        ),
        migrations.AddField(
            model_name='customer',
            name='interests',
            field=models.ManyToManyField(blank=True, related_name='customer_interest', through='customer.CustomerInterest', to='customer.interest', verbose_name='Интересы'),
        ),
        migrations.AddField(
            model_name='customer',
            name='status',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='customer.role', verbose_name='Роль'),
        ),
        migrations.CreateModel(
            name='SocialNetwork',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.CharField(max_length=60, verbose_name='Ссылка на соц сеть/месседжер/сайт')),
                ('datetime_create', models.DateTimeField(auto_now_add=True)),
                ('name', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='socialnetwork_name', to='customer.namesocialnetwork', verbose_name='Название соц сети')),
            ],
            options={
                'verbose_name': 'Ссылка на соц сеть',
                'verbose_name_plural': 'Ссылки на соц сети',
            },
        ),
        migrations.AddField(
            model_name='customer',
            name='tariff',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='customer.tariff', verbose_name='Тариф'),
        ),
    ]
